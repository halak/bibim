<?xml version="1.0" encoding="utf-8"?>

<part xmlns="http://docbook.org/ns/docbook" xml:id="quickstart">
  <title>Quick Start</title>
  <chapter xml:id="quickstart.mapping">
    <title>Mapping JSON to objects and vice versa</title>

    <para>
      In order to consume data in JSON format inside .Net programs, the
      natural approach that comes to mind is to use JSON text to populate a
      new instance of a particular class; either a custom one, built to
      match the structure of the input JSON text, or a more general one
      which acts as a dictionary.
    </para>
    <para>
      Conversely, in order to build new JSON strings from data stored in
      objects, a simple <emphasis>export</emphasis>-like operation sounds
      like a good idea.
    </para>
    <para>
      For this purpose, LitJSON includes the <classname
      role="T">JsonMapper</classname> class, which provides two main methods
      used to do JSON-to-object and object-to-JSON conversions. These
      methods are <methodname role="T:JsonMapper">ToObject</methodname> and
      <methodname role="T:JsonMapper">ToJson</methodname>.
    </para>
    <example xml:id="quickstart.mapping.examples.jsonmapper">
      <title>Simple JsonMapper examples</title>
      <para>
        As the example shows, the method
        <methodname>JsonMapper.ToObject</methodname> has a generic variant
        that is used to specify the type of the object to be returned.
      </para>
      <programlisting language="c#">
<![CDATA[
using LitJson;
using System;

public class Person
{
    // Person members are defined here ...
}

public class JsonSample
{
    public static void Main ()
    {
        PersonToJson ();
        JsonToPerson ();
    }

    public static void PersonToJson ()
    {
        Person bill = new Person ();

        bill.Name = "William Shakespeare";
        bill.Age  = 51;
        bill.Birthday = new DateTime (1564, 4, 26);

        string json_bill = JsonMapper.ToJson (bill);

        Console.WriteLine (json_bill);
        // {"Name":"William Shakespeare","Age":51,"Birthday":"04/26/1564 00:00:00"}
    }

    public static void JsonToPerson ()
    {
        string json = @"
            {
                ""Name""     : ""Thomas More"",
                ""Age""      : 57,
                ""Birthday"" : ""02/07/1478 00:00:00""
            }";

        Person thomas = JsonMapper.ToObject<Person> (json);

        Console.WriteLine ("Thomas' age: {0}", thomas.Age);
        // Thomas' age: 57
    }
}
]]>
      </programlisting>
    </example>
    <para>
      When JSON data is to be read and a custom class that matches a
      particular data structure is not available or desired, users can use
      the non-generic variant of <methodname>ToObject</methodname>, which
      returns a <classname role="T">JsonData</classname> instance.
      <classname>JsonData</classname> is a general purpose type that can
      hold any of the data types supported by JSON, including lists and
      dictionaries.
    </para>
    <example xml:id="quickstart.mapping.examples.jsondata">
      <title>Using the non-generic variant of JsonMapper.ToObject</title>
      <programlisting language="c#">
<![CDATA[
using LitJson;
using System;

public class JsonSample
{
    public void LoadAlbumData (string json_text)
    {
        JsonData data = JsonMapper.ToObject (json_text);

        // Dictionaries are accessed like a hash-table
        Console.WriteLine ("Album's name: {0}", data["album"]["name"]);

        // Scalar elements stored in a JsonData instance can be cast to
        // their natural types
        string artist = (string) data["album"]["artist"];
        int    year   = (int) data["album"]["year"];

        // Arrays are accessed like regular lists as well
        Console.WriteLine ("First track: {0}", data["album"]["tracks"][0]);
    }
}
]]>
      </programlisting>
    </example>
  </chapter>

  <chapter xml:id="quickstart.readerwriter">
    <title>Readers and Writers</title>
    <para>
      An alternative interface to handling JSON data that might be familiar
      to some developers is through classes that make it possible to read
      and write data in a stream-like fashion. These classes are <classname
      role="T">JsonReader</classname> and <classname
      role="T">JsonWriter</classname>.
    </para>
    <para>
      These two types are in fact the foundation of this library, and the
      <classname>JsonMapper</classname> type is built on top of them, so in
      a way, the developer can think of the reader and writer classes as the
      low-level programming interface for LitJSON.
    </para>
    <example xml:id="quickstart.readerwriter.examples.jsonreader">
      <title>Using JsonReader</title>
      <programlisting language="c#">
<![CDATA[
using LitJson;
using System;

public class DataReader
{
    public static void Main ()
    {
        string sample = @"{
            ""name""  : ""Bill"",
            ""age""   : 32,
            ""awake"" : true,
            ""n""     : 1994.0226,
            ""note""  : [ ""life"", ""is"", ""but"", ""a"", ""dream"" ]
          }";

        ReadJson (sample);
    }

    public static void ReadJson (string json)
    {
        JsonReader reader = new JsonReader (json);

        Console.WriteLine ("{0,14} {1,10} {2,16}", "Token", "Value", "Type");
        Console.WriteLine (new String ('-', 42));

        // The Read() method returns false when there's nothing else to read
        while (reader.Read ()) {
            string type = reader.Value != null ?
                reader.Value.GetType ().ToString () : "";

            Console.WriteLine ("{0,14} {1,10} {2,16}",
                               reader.Token, reader.Value, type);
        }
    }
}
]]>
      </programlisting>
      <para>
        This example would produce the following output:
      </para>
      <screen>
<![CDATA[
         Token      Value             Type
------------------------------------------
   ObjectStart                            
  PropertyName       name    System.String
        String       Bill    System.String
  PropertyName        age    System.String
           Int         32     System.Int32
  PropertyName      awake    System.String
       Boolean       True   System.Boolean
  PropertyName          n    System.String
        Double  1994.0226    System.Double
  PropertyName       note    System.String
    ArrayStart                            
        String       life    System.String
        String         is    System.String
        String        but    System.String
        String          a    System.String
        String      dream    System.String
      ArrayEnd                            
     ObjectEnd                            
]]>
      </screen>
    </example>
    <example xml:id="quickstart.readerwriter.examples.jsonwriter">
      <title>Using JsonWriter</title>
      <programlisting language="c#">
<![CDATA[
using LitJson;
using System;
using System.Text;

public class DataReader
{
    public static void WriteJson ()
    {
        StringBuilder sb = new StringBuilder ();
        JsonWriter writer = new JsonWriter (sb);

        writer.WriteArrayStart ();
        writer.Write (1);
        writer.Write (2);
        writer.Write (3);

        writer.WriteObjectStart ();
        writer.WritePropertyName ("color");
        writer.Write ("blue");
        writer.WriteObjectEnd ();

        writer.WriteArrayEnd ();

        Console.WriteLine (sb.ToString ());
        // [1,2,3,{"color":"blue"}]
    }
}
]]>
      </programlisting>
    </example>
  </chapter>
</part>
